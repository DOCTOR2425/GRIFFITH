#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestSQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TestData")]
	public partial class TestDataBase : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertTable_1(Table_1 instance);
    partial void UpdateTable_1(Table_1 instance);
    partial void DeleteTable_1(Table_1 instance);
    partial void InsertTable_2(Table_2 instance);
    partial void UpdateTable_2(Table_2 instance);
    partial void DeleteTable_2(Table_2 instance);
    #endregion
		
		public TestDataBase() : 
				base(global::TestSQL.Properties.Settings.Default.TestDataConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TestDataBase(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestDataBase(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestDataBase(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestDataBase(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Table_1> Table_1
		{
			get
			{
				return this.GetTable<Table_1>();
			}
		}
		
		public System.Data.Linq.Table<Table_2> Table_2
		{
			get
			{
				return this.GetTable<Table_2>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Table_1")]
	public partial class Table_1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NumberID;
		
		private string _Name;
		
		private EntityRef<Table_2> _Table_2;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNumberIDChanging(System.Guid value);
    partial void OnNumberIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Table_1()
		{
			this._Table_2 = default(EntityRef<Table_2>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NumberID
		{
			get
			{
				return this._NumberID;
			}
			set
			{
				if ((this._NumberID != value))
				{
					this.OnNumberIDChanging(value);
					this.SendPropertyChanging();
					this._NumberID = value;
					this.SendPropertyChanged("NumberID");
					this.OnNumberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_1_Table_2", Storage="_Table_2", ThisKey="NumberID", OtherKey="NumberID", IsUnique=true, IsForeignKey=false)]
		public Table_2 Table_2
		{
			get
			{
				return this._Table_2.Entity;
			}
			set
			{
				Table_2 previousValue = this._Table_2.Entity;
				if (((previousValue != value) 
							|| (this._Table_2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Table_2.Entity = null;
						previousValue.Table_1 = null;
					}
					this._Table_2.Entity = value;
					if ((value != null))
					{
						value.Table_1 = this;
					}
					this.SendPropertyChanged("Table_2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Table_2")]
	public partial class Table_2 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NumberID;
		
		private string _Qwerty;
		
		private EntityRef<Table_1> _Table_1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNumberIDChanging(System.Guid value);
    partial void OnNumberIDChanged();
    partial void OnQwertyChanging(string value);
    partial void OnQwertyChanged();
    #endregion
		
		public Table_2()
		{
			this._Table_1 = default(EntityRef<Table_1>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NumberID
		{
			get
			{
				return this._NumberID;
			}
			set
			{
				if ((this._NumberID != value))
				{
					if (this._Table_1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNumberIDChanging(value);
					this.SendPropertyChanging();
					this._NumberID = value;
					this.SendPropertyChanged("NumberID");
					this.OnNumberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qwerty", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Qwerty
		{
			get
			{
				return this._Qwerty;
			}
			set
			{
				if ((this._Qwerty != value))
				{
					this.OnQwertyChanging(value);
					this.SendPropertyChanging();
					this._Qwerty = value;
					this.SendPropertyChanged("Qwerty");
					this.OnQwertyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table_1_Table_2", Storage="_Table_1", ThisKey="NumberID", OtherKey="NumberID", IsForeignKey=true)]
		public Table_1 Table_1
		{
			get
			{
				return this._Table_1.Entity;
			}
			set
			{
				Table_1 previousValue = this._Table_1.Entity;
				if (((previousValue != value) 
							|| (this._Table_1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Table_1.Entity = null;
						previousValue.Table_2 = null;
					}
					this._Table_1.Entity = value;
					if ((value != null))
					{
						value.Table_2 = this;
						this._NumberID = value.NumberID;
					}
					else
					{
						this._NumberID = default(System.Guid);
					}
					this.SendPropertyChanged("Table_1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
